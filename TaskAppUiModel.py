from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMessageBox
from PyQt5.QtCore import QTimer
import zmq

class Ui_MainWindow(object):
    def __init__(self):
        self.sockets = {'timer': "tcp://localhost:5555",
                        'calendar': "tcp://localhost:5554",
                        'database': "tcp://localhost:5553",
                        'stats': "tcp://localhost:5552"}
        
        self.MainWindow = QtWidgets.QMainWindow()
        self.context = zmq.Context()
        self.open_comm('database')
        
        self.date = self.req_timer('getDate')
        self.default_date = QtCore.QDate.fromString(self.date, "d-M-yyyy")

        self.tasks_on_entry = self.req_database('getTasks')

        self.setupUi()
        self.MainWindow.show()
        
    def setupUi(self):
        self.MainWindow.setObjectName("MainWindow")
        self.MainWindow.resize(1565, 866)
        self.MainWindow.setAutoFillBackground(False)
        self.MainWindow.setStyleSheet("#MainWindow{background-color: rgb(255, 255, 255);}\n")
        for i in range(25):
            new = QtWidgets.QFrame(self.MainWindow)
            new.setGeometry(QtCore.QRect(10, 90+(30*i), 1541, 41))
            new.setFrameShadow(QtWidgets.QFrame.Plain)
            new.setFrameShape(QtWidgets.QFrame.HLine)
            new.setObjectName(f"line_{i*10}")
            new.setStyleSheet("color: rgba(0,170,255, 75)")
            new.raise_()
        self.stackedWidget = QtWidgets.QStackedWidget(self.MainWindow)
        self.stackedWidget.setGeometry(QtCore.QRect(10, 50, 1540, 800))
        self.stackedWidget.setAutoFillBackground(False)
        self.stackedWidget.setStyleSheet("background-color: rgba(255, 255, 255, 0);")
        self.stackedWidget.setObjectName("stackedWidget")
        self.taskListPage = QtWidgets.QWidget()
        self.taskListPage.setObjectName("taskListPage")
        self.taskListGroup = QtWidgets.QGroupBox(self.taskListPage)
        self.taskListGroup.setGeometry(QtCore.QRect(20, 10, 1510, 791))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.taskListGroup.setPalette(palette)
        self.taskListGroup.setAutoFillBackground(False)
        self.taskListGroup.setStyleSheet("#taskListGroup {background-color: rgba(255, 255, 255, 0);border: 0px}\n"
"QLabel {color: rgb(92,98,116);}\n"
"QPushButton {\n"
"background-color: rgb(226, 231, 242);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 18pt \"Ink Free\";}\n"
"QPushButton:hover {background-color: rgb(197, 212, 245);}\n"
"QPushButton:pressed {background-color: rgb(226, 227, 255);}\n"
"QPushButton:!enabled {background-color: rgb(161, 166, 179);}\n"
"QLineEdit {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px;}\n"
"QTextEdit {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px;}\n"
"QDateEdit {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px;}\n"
"QListWidget {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px;}\n"
"QComboBox {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px;}\n"
"CalendarPopup {background-color: rgb(255,255,255);}\n"
"")
        self.taskListGroup.setTitle("")
        self.taskListGroup.setFlat(True)
        self.taskListGroup.setObjectName("taskListGroup")
        self.label_33 = QtWidgets.QLabel(self.taskListGroup)
        self.label_33.setGeometry(QtCore.QRect(630, 0, 261, 71))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(28)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_33.setFont(font)
        self.label_33.setStyleSheet("font: bold 28pt \"Ink Free\";")
        self.label_33.setAlignment(QtCore.Qt.AlignCenter)
        self.label_33.setObjectName("label_33")
        self.inspectTask = QtWidgets.QGroupBox(self.taskListGroup)
        self.inspectTask.setEnabled(False)
        self.inspectTask.setGeometry(QtCore.QRect(1175, 50, 321, 731))
        font = QtGui.QFont()
        font.setFamily("Sitka Text")
        self.inspectTask.setFont(font)
        self.inspectTask.setAutoFillBackground(False)
        self.inspectTask.setStyleSheet("#inspectTask {border: 0px;}")
        self.inspectTask.setTitle("")
        self.inspectTask.setFlat(True)
        self.inspectTask.setCheckable(False)
        self.inspectTask.setObjectName("inspectTask")
        self.addTodo = QtWidgets.QPushButton(self.inspectTask)
        self.addTodo.setGeometry(QtCore.QRect(20, 400, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.addTodo.setFont(font)
        self.addTodo.setStyleSheet("")
        self.addTodo.setDefault(False)
        self.addTodo.setFlat(False)
        self.addTodo.setObjectName("addTodo")
        self.beginTask = QtWidgets.QPushButton(self.inspectTask)
        self.beginTask.setGeometry(QtCore.QRect(20, 350, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.beginTask.setFont(font)
        self.beginTask.setFocusPolicy(QtCore.Qt.StrongFocus)
        self.beginTask.setAutoFillBackground(False)
        self.beginTask.setStyleSheet("")
        self.beginTask.setCheckable(False)
        self.beginTask.setDefault(False)
        self.beginTask.setFlat(False)
        self.beginTask.setObjectName("beginTask")
        self.deleteTask = QtWidgets.QPushButton(self.inspectTask)
        self.deleteTask.setGeometry(QtCore.QRect(20, 690, 281, 31))
        self.finishTask = QtWidgets.QPushButton(self.inspectTask)
        self.finishTask.setGeometry(QtCore.QRect(20, 640, 281, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.deleteTask.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.deleteTask.setFont(font)
        self.deleteTask.setStyleSheet("")
        self.deleteTask.setDefault(False)
        self.deleteTask.setFlat(False)
        self.deleteTask.setObjectName("deleteTask")
        self.beginEdit = QtWidgets.QPushButton(self.inspectTask)
        self.beginEdit.setGeometry(QtCore.QRect(20, 550, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.beginEdit.setFont(font)
        self.beginEdit.setAutoFillBackground(False)
        self.beginEdit.setStyleSheet("")
        self.beginEdit.setCheckable(False)
        self.beginEdit.setDefault(False)
        self.beginEdit.setFlat(False)
        self.beginEdit.setObjectName("beginEdit")
        self.editTaskName = QtWidgets.QLineEdit(self.inspectTask)
        self.editTaskName.setGeometry(QtCore.QRect(20, 30, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        self.editTaskName.setFont(font)
        self.editTaskName.setStyleSheet("")
        self.editTaskName.setReadOnly(True)
        self.editTaskName.setClearButtonEnabled(False)
        self.editTaskName.setObjectName("editTaskName")
        self.editTaskDesc = QtWidgets.QTextEdit(self.inspectTask)
        self.editTaskDesc.setGeometry(QtCore.QRect(20, 90, 281, 121))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(10)
        self.editTaskDesc.setFont(font)
        self.editTaskDesc.setStyleSheet("")
        self.editTaskDesc.setObjectName("editTaskDesc")
        self.label_25 = QtWidgets.QLabel(self.inspectTask)
        self.label_25.setGeometry(QtCore.QRect(20, 10, 71, 16))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_25.setFont(font)
        self.label_25.setObjectName("label_25")
        self.label_26 = QtWidgets.QLabel(self.inspectTask)
        self.label_26.setGeometry(QtCore.QRect(20, 70, 131, 16))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_26.setFont(font)
        self.label_26.setStyleSheet("")
        self.label_26.setObjectName("label_26")
        self.label_27 = QtWidgets.QLabel(self.inspectTask)
        self.label_27.setGeometry(QtCore.QRect(20, 220, 111, 16))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_27.setFont(font)
        self.label_27.setStyleSheet("")
        self.label_27.setObjectName("label_27")
        self.label_31 = QtWidgets.QLabel(self.inspectTask)
        self.label_31.setGeometry(QtCore.QRect(20, 280, 91, 16))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setWeight(75)
        self.label_31.setFont(font)
        self.label_31.setStyleSheet("")
        self.label_31.setObjectName("label_31")
        self.editSave = QtWidgets.QPushButton(self.inspectTask)
        self.editSave.setGeometry(QtCore.QRect(20, 590, 131, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.editSave.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.editSave.setFont(font)
        self.editSave.setStyleSheet("")
        self.editSave.setDefault(False)
        self.editSave.setFlat(False)
        self.editSave.setObjectName("editSave")
        self.editCancel = QtWidgets.QPushButton(self.inspectTask)
        self.editCancel.setGeometry(QtCore.QRect(170, 590, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.editCancel.setFont(font)
        self.editCancel.setStyleSheet("")
        self.editCancel.setObjectName("editCancel")
        self.editDueDate = QtWidgets.QDateEdit(self.inspectTask)
        self.editDueDate.setGeometry(QtCore.QRect(20, 240, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        self.editDueDate.setFont(font)
        self.editDueDate.setStyleSheet("")
        self.editDueDate.setAlignment(QtCore.Qt.AlignCenter)
        self.editDueDate.setAccelerated(False)
        self.editDueDate.setProperty("showGroupSeparator", False)
        self.editDueDate.setCalendarPopup(True)
        self.editDueDate.calendarWidget().setGridVisible(True)
        self.editDueDate.calendarWidget().setStyleSheet("background-color: rgb(255,255,255);\ncolor: rgb(0,0,0);")
        self.editDueDate.setObjectName("editDueDate")
        self.editDueDate.setMinimumDate(QtCore.QDate.fromString("01-01-2000", 'dd-MM-yyyy'))
        self.createPriority_2 = QtWidgets.QComboBox(self.inspectTask)
        self.createPriority_2.setGeometry(QtCore.QRect(20, 300, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.createPriority_2.setFont(font)
        self.createPriority_2.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.createPriority_2.setAutoFillBackground(False)
        self.createPriority_2.setStyleSheet("")
        self.createPriority_2.setCurrentText("")
        self.createPriority_2.setObjectName("createPriority_2")
        self.createPriority_2.addItem("")
        self.createPriority_2.setItemText(0, "")
        self.createPriority_2.addItem("")
        self.createPriority_2.addItem("")
        self.createPriority_2.addItem("")
        self.editTodoName = QtWidgets.QLineEdit(self.inspectTask)
        self.editTodoName.setGeometry(QtCore.QRect(20, 460, 281, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        self.editTodoName.setFont(font)
        self.editTodoName.setStyleSheet("")
        self.editTodoName.setReadOnly(True)
        self.editTodoName.setClearButtonEnabled(False)
        self.editTodoName.setObjectName("editTodoName")
        self.label_28 = QtWidgets.QLabel(self.inspectTask)
        self.label_28.setGeometry(QtCore.QRect(20, 440, 121, 16))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_28.setFont(font)
        self.label_28.setObjectName("label_28")
        self.editTodoCancel = QtWidgets.QPushButton(self.inspectTask)
        self.editTodoCancel.setGeometry(QtCore.QRect(170, 500, 131, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.editTodoCancel.setFont(font)
        self.editTodoCancel.setStyleSheet("")
        self.editTodoCancel.setObjectName("editTodoCancel")
        self.editTodoSave = QtWidgets.QPushButton(self.inspectTask)
        self.editTodoSave.setGeometry(QtCore.QRect(20, 500, 131, 31))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(226, 231, 242))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.AlternateBase, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(161, 166, 179))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Highlight, brush)
        brush = QtGui.QBrush(QtGui.QColor(91, 91, 91))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.AlternateBase, brush)
        self.editTodoSave.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.editTodoSave.setFont(font)
        self.editTodoSave.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.editTodoSave.setStyleSheet("")
        self.editTodoSave.setDefault(False)
        self.editTodoSave.setFlat(False)
        self.editTodoSave.setObjectName("editTodoSave")
        self.addTaskButton = QtWidgets.QPushButton(self.taskListGroup)
        self.addTaskButton.setGeometry(QtCore.QRect(20, 740, 181, 31))

        self.calendarButton = QtWidgets.QPushButton(self.taskListGroup)
        self.calendarButton.setGeometry(QtCore.QRect(790, 740, 181, 31))

        self.toCalendarButton = QtWidgets.QPushButton(self.taskListGroup)
        self.toCalendarButton.setGeometry(QtCore.QRect(980, 740, 181, 31))

        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.addTaskButton.setFont(font)
        self.addTaskButton.setCursor(QtGui.QCursor(QtCore.Qt.ArrowCursor))
        self.addTaskButton.setStyleSheet("")
        self.addTaskButton.setCheckable(False)
        self.addTaskButton.setDefault(False)
        self.addTaskButton.setFlat(False)
        self.addTaskButton.setObjectName("addTaskButton")
        self.taskListFrame = QtWidgets.QFrame(self.taskListGroup)
        self.taskListFrame.setGeometry(QtCore.QRect(20, 80, 1141, 631))
        self.taskListFrame.setAutoFillBackground(False)
        self.taskListFrame.setStyleSheet("#taskListFrame {border: 2px solid black; border-radius: 8px; background-color: rgb(255, 255, 255);}")
        self.taskListFrame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.taskListFrame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.taskListFrame.setObjectName("taskListFrame")
        self.taskList = QtWidgets.QTreeWidget(self.taskListFrame)
        self.taskList.setGeometry(QtCore.QRect(10, 10, 1121, 631))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(False)
        font.setItalic(False)
        font.setWeight(50)
        self.taskList.setFont(font)
        self.taskList.setAutoFillBackground(False)
        self.taskList.setStyleSheet("font: 18pt \"Ink Free\";\n"
"color: rgb(92,98,116);")
        self.taskList.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.taskList.setFrameShadow(QtWidgets.QFrame.Plain)
        self.taskList.setLineWidth(0)
        self.taskList.setEditTriggers(QtWidgets.QAbstractItemView.DoubleClicked|QtWidgets.QAbstractItemView.EditKeyPressed|QtWidgets.QAbstractItemView.SelectedClicked)
        self.taskList.setAlternatingRowColors(True)
        self.taskList.setUniformRowHeights(False)
        self.taskList.setAnimated(True)
        self.taskList.setAllColumnsShowFocus(False)
        self.taskList.setWordWrap(True)
        self.taskList.setHeaderHidden(False)
        self.taskList.setColumnCount(5)
        self.taskList.setObjectName("taskList")
        self.taskList.headerItem().setTextAlignment(0, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.taskList.headerItem().setFont(0, font)
        self.taskList.headerItem().setBackground(0, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.taskList.headerItem().setForeground(0, brush)
        self.taskList.headerItem().setTextAlignment(1, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.taskList.headerItem().setFont(1, font)
        self.taskList.headerItem().setBackground(1, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.taskList.headerItem().setForeground(1, brush)
        self.taskList.headerItem().setTextAlignment(2, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.taskList.headerItem().setFont(2, font)
        self.taskList.headerItem().setBackground(2, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.taskList.headerItem().setForeground(2, brush)
        self.taskList.headerItem().setTextAlignment(3, QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        font.setKerning(True)
        self.taskList.headerItem().setFont(3, font)
        self.taskList.headerItem().setBackground(3, QtGui.QColor(255, 255, 255))
        brush = QtGui.QBrush(QtGui.QColor(0, 0, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        self.taskList.headerItem().setForeground(3, brush)
        self.taskList.header().setVisible(True)
        self.taskList.header().setCascadingSectionResizes(True)
        self.taskList.header().setDefaultSectionSize(275)
        self.taskList.header().setHighlightSections(False)
        self.taskList.header().setSortIndicatorShown(False)
        self.taskList.header().setStretchLastSection(True)
        self.stackedWidget.addWidget(self.taskListPage)
        self.createTaskPage = QtWidgets.QWidget()
        self.createTaskPage.setObjectName("createTaskPage")
        self.createTaskGroup = QtWidgets.QGroupBox(self.createTaskPage)
        self.createTaskGroup.setEnabled(False)
        self.createTaskGroup.setGeometry(QtCore.QRect(20, 10, 1510, 780))
        self.createTaskGroup.setStyleSheet("#createTaskGroup {background-color: rgba(255, 255, 255, 0);\n"
"border: 0px}\n"
"QLabel {color: rgb(92,98,116); font: bold 18pt \"Ink Free\";}\n"
"QPushButton {\n"
"background-color: rgb(226, 231, 242);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 14pt \"Ink Free\";}\n"
"QPushButton:hover {background-color: rgb(197, 212, 245);}\n"
"QPushButton:pressed {background-color: rgb(226, 227, 255);}\n"
"QPushButton:!enabled {background-color: rgb(161, 166, 179);}\n"
"QLineEdit {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QTextEdit {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QDateEdit {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QListWidget {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QComboBox {background-color: rgb(255,255,255); border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
)
        self.createTaskGroup.setTitle("")
        self.createTaskGroup.setFlat(True)
        self.createTaskGroup.setObjectName("createTaskGroup")
        self.createDesc = QtWidgets.QTextEdit(self.createTaskGroup)
        self.createDesc.setGeometry(QtCore.QRect(60, 230, 741, 411))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Light, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.createDesc.setPalette(palette)
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createDesc.setFont(font)
        self.createDesc.setStyleSheet("")
        self.createDesc.setObjectName("createDesc")
        self.label_5 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_5.setGeometry(QtCore.QRect(60, 210, 141, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.createCancel = QtWidgets.QPushButton(self.createTaskGroup)
        self.createCancel.setGeometry(QtCore.QRect(990, 720, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createCancel.setFont(font)
        self.createCancel.setStyleSheet("")
        self.createCancel.setDefault(False)
        self.createCancel.setFlat(False)
        self.createCancel.setObjectName("createCancel")
        self.label_4 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_4.setGeometry(QtCore.QRect(50, 120, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.createName = QtWidgets.QLineEdit(self.createTaskGroup)
        self.createName.setGeometry(QtCore.QRect(60, 140, 741, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createName.setFont(font)
        self.createName.setStyleSheet("")
        self.createName.setObjectName("createName")
        self.createSave = QtWidgets.QPushButton(self.createTaskGroup)
        self.createSave.setGeometry(QtCore.QRect(410, 720, 151, 41))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createSave.setFont(font)
        self.createSave.setStyleSheet("")
        self.createSave.setDefault(False)
        self.createSave.setFlat(False)
        self.createSave.setObjectName("createSave")
        self.label_3 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_3.setGeometry(QtCore.QRect(900, 120, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_3.setFont(font)
        self.label_3.setStyleSheet("")
        self.label_3.setObjectName("label_3")
        self.createDueDate = QtWidgets.QDateEdit(self.createTaskGroup)
        self.createDueDate.setGeometry(QtCore.QRect(900, 230, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createDueDate.setFont(font)
        self.createDueDate.setStyleSheet("")
        self.createDueDate.setAlignment(QtCore.Qt.AlignCenter)
        self.createDueDate.setReadOnly(False)
        self.createDueDate.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.createDueDate.setCalendarPopup(True)
        self.createDueDate.calendarWidget().setGridVisible(True)
        self.createDueDate.calendarWidget().setStyleSheet("background-color: rgb(255,255,255);\ncolor: rgb(0,0,0);")
        self.createDueDate.setObjectName("createDueDate")
        self.createDueDate.setMinimumDate(QtCore.QDate.fromString("01-01-2000", 'dd-MM-yyyy'))
        self.label_6 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_6.setGeometry(QtCore.QRect(40, 140, 21, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_6.setFont(font)
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.label = QtWidgets.QLabel(self.createTaskGroup)
        self.label.setGeometry(QtCore.QRect(900, 210, 121, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.createPriority = QtWidgets.QComboBox(self.createTaskGroup)
        self.createPriority.setGeometry(QtCore.QRect(900, 140, 201, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createPriority.setFont(font)
        self.createPriority.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.createPriority.setAutoFillBackground(False)
        self.createPriority.setStyleSheet("")
        self.createPriority.setCurrentText("")
        self.createPriority.setObjectName("createPriority")
        self.createPriority.addItem("")
        self.createPriority.setItemText(0, "")
        self.createPriority.addItem("")
        self.createPriority.addItem("")
        self.createPriority.addItem("")
        self.label_7 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_7.setGeometry(QtCore.QRect(60, 720, 191, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_7.setFont(font)
        self.label_7.setObjectName("label_7")
        self.label_32 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_32.setGeometry(QtCore.QRect(620, 0, 260, 70))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(28)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_32.setFont(font)
        self.label_32.setStyleSheet("font: bold 28pt \"Ink Free\";")
        self.label_32.setAlignment(QtCore.Qt.AlignCenter)
        self.label_32.setObjectName("label_32")
        self.todoListLabel = QtWidgets.QLabel(self.createTaskGroup)
        self.todoListLabel.setGeometry(QtCore.QRect(900, 360, 91, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.todoListLabel.setFont(font)
        self.todoListLabel.setObjectName("todoListLabel")
        self.createTodoList = QtWidgets.QListWidget(self.createTaskGroup)
        self.createTodoList.setGeometry(QtCore.QRect(900, 380, 511, 261))
        self.createTodoList.setStyleSheet("")
        self.createTodoList.setObjectName("createTodoList")
        self.todoName = QtWidgets.QLineEdit(self.createTaskGroup)
        self.todoName.setGeometry(QtCore.QRect(1150, 230, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(12)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.todoName.setFont(font)
        self.todoName.setStyleSheet("")
        self.todoName.setObjectName("todoName")
        self.todoLabel = QtWidgets.QLabel(self.createTaskGroup)
        self.todoLabel.setGeometry(QtCore.QRect(1150, 210, 151, 21))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.todoLabel.setFont(font)
        self.todoLabel.setObjectName("todoLabel")
        self.todoSave = QtWidgets.QPushButton(self.createTaskGroup)
        self.todoSave.setGeometry(QtCore.QRect(1150, 290, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.todoSave.setFont(font)
        self.todoSave.setStyleSheet("")
        self.todoSave.setFlat(False)
        self.todoSave.setObjectName("todoSave")
        self.todoCancel = QtWidgets.QPushButton(self.createTaskGroup)
        self.todoCancel.setGeometry(QtCore.QRect(1300, 290, 111, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.todoCancel.setFont(font)
        self.todoCancel.setAutoFillBackground(False)
        self.todoCancel.setStyleSheet("")
        self.todoCancel.setObjectName("todoCancel")
        self.createTodo = QtWidgets.QPushButton(self.createTaskGroup)
        self.createTodo.setGeometry(QtCore.QRect(1150, 140, 261, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(14)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.createTodo.setFont(font)
        self.createTodo.setStyleSheet("")
        self.createTodo.setDefault(False)
        self.createTodo.setFlat(False)
        self.createTodo.setObjectName("createTodo")
        self.label_10 = QtWidgets.QLabel(self.createTaskGroup)
        self.label_10.setGeometry(QtCore.QRect(880, 230, 21, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_10.setFont(font)
        self.label_10.setAlignment(QtCore.Qt.AlignCenter)
        self.label_10.setObjectName("label_10")
        self.todoReqLabel = QtWidgets.QLabel(self.createTaskGroup)
        self.todoReqLabel.setGeometry(QtCore.QRect(1130, 230, 21, 31))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(18)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.todoReqLabel.setFont(font)
        self.todoReqLabel.setAlignment(QtCore.Qt.AlignCenter)
        self.todoReqLabel.setObjectName("todoReqLabel")
        self.stackedWidget.addWidget(self.createTaskPage)
        self.timerPage = QtWidgets.QWidget()
        self.timerPage.setEnabled(False)
        self.timerPage.setObjectName("timerPage")
        self.timerGroup = QtWidgets.QGroupBox(self.timerPage)
        self.timerGroup.setGeometry(QtCore.QRect(20, 10, 1510, 780))
        self.timerGroup.setStyleSheet("#timerGroup {background-color: rgba(255, 255, 255, 0);border: 0px}\n"
"QLabel {color: rgb(92,98,116); font: bold 18pt \"Ink Free\";}\n"
"QPushButton {\n"
"background-color: rgb(226, 231, 242);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 18pt \"Ink Free\";}\n"
"QPushButton:hover {background-color: rgb(197, 212, 245);}\n"
"QPushButton:pressed {background-color: rgb(226, 227, 255);}\n"
"QPushButton:!enabled {background-color: rgb(161, 166, 179);}\n"
"QLineEdit {border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QTextEdit {border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QDateEdit {border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QListWidget {border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}\n"
"QComboBox {border: 2px solid rgb(0,0,0); border-radius: 4px; font: bold 12pt \"Ink Free\";}")
        self.timerGroup.setTitle("")
        self.timerGroup.setFlat(True)
        self.timerGroup.setObjectName("timerGroup")
        self.label_36 = QtWidgets.QLabel(self.timerGroup)
        self.label_36.setGeometry(QtCore.QRect(600, 0, 311, 70))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(28)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_36.setFont(font)
        self.label_36.setStyleSheet("font: bold 28pt \"Ink Free\";")
        self.label_36.setAlignment(QtCore.Qt.AlignCenter)
        self.label_36.setObjectName("label_36")
        self.timerStart = QtWidgets.QPushButton(self.timerGroup)
        self.timerStart.setGeometry(QtCore.QRect(360, 630, 181, 71))
        self.timerStart.setObjectName("timerStart")
        self.timerStop = QtWidgets.QPushButton(self.timerGroup)
        self.timerStop.setGeometry(QtCore.QRect(660, 630, 181, 71))
        self.timerStop.setObjectName("timerStop")
        self.timerReset = QtWidgets.QPushButton(self.timerGroup)
        self.timerReset.setGeometry(QtCore.QRect(950, 630, 181, 71))
        self.timerReset.setObjectName("timerReset")
        self.label_2 = QtWidgets.QLabel(self.timerGroup)
        self.label_2.setGeometry(QtCore.QRect(375, 180, 921, 201))
        self.label_2.setStyleSheet("font: bold 108pt \"Ink Free\";")
        self.label_2.setAlignment(QtCore.Qt.AlignLeft)
        self.label_2.setObjectName("label_2")
        self.stackedWidget.addWidget(self.timerPage)
        self.helpPage = QtWidgets.QWidget()
        self.helpPage.setObjectName("helpPage")
        self.helpGroup = QtWidgets.QGroupBox(self.helpPage)
        self.helpGroup.setGeometry(QtCore.QRect(20, 10, 1510, 711))
        palette = QtGui.QPalette()
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Active, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Inactive, QtGui.QPalette.Window, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Button, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Base, brush)
        brush = QtGui.QBrush(QtGui.QColor(255, 255, 255, 0))
        brush.setStyle(QtCore.Qt.SolidPattern)
        palette.setBrush(QtGui.QPalette.Disabled, QtGui.QPalette.Window, brush)
        self.helpGroup.setPalette(palette)
        self.helpGroup.setAutoFillBackground(False)
        self.helpGroup.setStyleSheet("#helpGroup {background-color: rgba(255, 255, 255, 0);border: 0px}\n"
"QLabel {color: rgb(92,98,116);}\n"
"QPushButton {border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 18pt \"Ink Free\";}")
        self.helpGroup.setTitle("")
        self.helpGroup.setFlat(True)
        self.helpGroup.setObjectName("helpGroup")
        self.label_34 = QtWidgets.QLabel(self.helpGroup)
        self.label_34.setEnabled(True)
        self.label_34.setGeometry(QtCore.QRect(625, 0, 261, 71))
        font = QtGui.QFont()
        font.setFamily("Ink Free")
        font.setPointSize(28)
        font.setBold(True)
        font.setItalic(False)
        font.setWeight(75)
        self.label_34.setFont(font)
        self.label_34.setStyleSheet("font: bold 28pt \"Ink Free\";")
        self.label_34.setAlignment(QtCore.Qt.AlignCenter)
        self.label_34.setObjectName("label_34")
        self.listWidget = QtWidgets.QListWidget(self.helpGroup)
        self.listWidget.setGeometry(QtCore.QRect(60, 80, 1411, 621))
        self.listWidget.viewport().setProperty("cursor", QtGui.QCursor(QtCore.Qt.CrossCursor))
        self.listWidget.setStyleSheet("border: 0px;\n"
"font: bold 18pt \"Ink Free\";")
        self.listWidget.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.listWidget.setLineWidth(0)
        self.listWidget.setAutoScroll(True)
        self.listWidget.setAutoScrollMargin(16)
        self.listWidget.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.listWidget.setProperty("showDropIndicator", False)
        self.listWidget.setAlternatingRowColors(False)
        self.listWidget.setIconSize(QtCore.QSize(0, 0))
        self.listWidget.setTextElideMode(QtCore.Qt.ElideRight)
        self.listWidget.setVerticalScrollMode(QtWidgets.QAbstractItemView.ScrollPerItem)
        self.listWidget.setHorizontalScrollMode(QtWidgets.QAbstractItemView.ScrollPerItem)
        self.listWidget.setMovement(QtWidgets.QListView.Static)
        self.listWidget.setFlow(QtWidgets.QListView.TopToBottom)
        self.listWidget.setProperty("isWrapping", False)
        self.listWidget.setResizeMode(QtWidgets.QListView.Fixed)
        self.listWidget.setLayoutMode(QtWidgets.QListView.SinglePass)
        self.listWidget.setViewMode(QtWidgets.QListView.ListMode)
        self.listWidget.setUniformItemSizes(False)
        self.listWidget.setWordWrap(True)
        self.listWidget.setSelectionRectVisible(False)
        self.listWidget.setObjectName("listWidget")
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        item = QtWidgets.QListWidgetItem()
        self.listWidget.addItem(item)
        self.stackedWidget.addWidget(self.helpPage)
        self.line_56 = QtWidgets.QFrame(self.MainWindow)
        self.line_56.setGeometry(QtCore.QRect(60, 0, 51, 871))
        self.line_56.setStyleSheet("color: rgb(255,0,0)")
        self.line_56.setFrameShadow(QtWidgets.QFrame.Plain)
        self.line_56.setFrameShape(QtWidgets.QFrame.VLine)
        self.line_56.setObjectName("line_56")
        self.helpButton = QtWidgets.QPushButton(self.MainWindow)
        self.helpButton.setGeometry(QtCore.QRect(1420, 20, 121, 31))
        self.helpButton.setStyleSheet("QPushButton {background-color: rgb(226, 231, 242);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 18pt \"Ink Free\";}\n"
"QPushButton:hover {background-color: rgb(197, 212, 245);}\n"
"QPushButton:pressed {background-color: rgb(226, 227, 255);}\n"
"QPushButton:!enabled {background-color: rgb(161, 166, 179);}")
        self.helpButton.setObjectName("helpButton")
        self.statsButton = QtWidgets.QPushButton(self.MainWindow)
        self.statsButton.setGeometry(QtCore.QRect(1290, 20, 121, 31))
        self.statsButton.setStyleSheet("QPushButton {background-color: rgb(226, 231, 242);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 18pt \"Ink Free\";}\n"
"QPushButton:hover {background-color: rgb(197, 212, 245);}\n"
"QPushButton:pressed {background-color: rgb(226, 227, 255);}\n"
"QPushButton:!enabled {background-color: rgb(161, 166, 179);}")
        self.statsButton.setObjectName("statsButton")
        self.helpBack = QtWidgets.QPushButton(self.MainWindow)
        self.helpBack.setEnabled(False)
        self.helpBack.setGeometry(QtCore.QRect(1420, 20, 121, 31))
        self.helpBack.setStyleSheet("QPushButton {background-color: rgb(226, 231, 242);\n"
"border: 2px solid rgb(0, 0, 0);\n"
"border-radius: 6px;\n"
"font: bold 18pt \"Ink Free\";}\n"
"QPushButton:hover {background-color: rgb(197, 212, 245);}\n"
"QPushButton:pressed {background-color: rgb(226, 227, 255);}\n"
"QPushButton:!enabled {background-color: rgb(161, 166, 179);}")
        self.helpBack.setObjectName("helpBack")
        self.helpBack.raise_()
        self.line_56.raise_()
        self.stackedWidget.raise_()
        self.helpButton.raise_()

        self.retranslateUi()
        self.stackedWidget.setCurrentIndex(0)
        self.createPriority_2.setCurrentIndex(-1)
        self.createPriority.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(self.MainWindow)

        self.currentitem = None

        self.populate_taskList()

        self.check_taskList_size()

        self.timerStop.setEnabled(False)
        
        self.helpBack.setVisible(False)

        self.view_create_todo(False)

        self.edit_add_todo()

        self.currTime = 0

        self.inspectTask.setVisible(False)

        self.timer = QTimer(self.MainWindow)
        self.timer.timeout.connect(self.init_timer)

        self.createName.textChanged.connect(lambda: self.validate_entry(text_field=self.createName, button=self.createSave))

        self.editTaskName.textChanged.connect(lambda: self.validate_entry(text_field=self.editTaskName, button=self.editSave))

        self.todoName.textChanged.connect(lambda: self.validate_entry(text_field=self.todoName, button=self.todoSave))

        self.editTodoName.textChanged.connect(lambda: self.validate_entry(text_field=self.editTodoName, button=self.editTodoSave))

        self.createSave.setEnabled(False)

        self.editSave.setEnabled(False)

        self.todoSave.setEnabled(False)

        self.editTodoSave.setEnabled(False)

        self.timerStarted = False

        self.handle_clicked()

    def retranslateUi(self):
        _translate = QtCore.QCoreApplication.translate
        self.MainWindow.setWindowTitle(_translate("self.MainWindow", "To-Do Task List"))
        self.label_33.setText(_translate("self.MainWindow", "Task List"))
        self.addTodo.setText(_translate("self.MainWindow", "Add To-Do"))
        self.beginTask.setText(_translate("self.MainWindow", "Begin Task"))
        self.deleteTask.setText(_translate("self.MainWindow", "Delete"))
        self.finishTask.setText(_translate("self.MainWindow", "Mark as Completed"))
        self.beginEdit.setText(_translate("self.MainWindow", "Edit Task"))
        self.editTaskName.setText(_translate("self.MainWindow", "Enter task name here..."))
        self.calendarButton.setText(_translate("self.MainWindow", "Add To Calendar"))
        self.toCalendarButton.setText(_translate("self.MainWindow", "Go To Calendar"))
        self.editTaskDesc.setPlaceholderText(_translate("self.MainWindow", "Enter task description here..."))
        self.label_25.setText(_translate("self.MainWindow", "Name:"))
        self.label_26.setText(_translate("self.MainWindow", "Description: "))
        self.label_27.setText(_translate("self.MainWindow", "Due Date:"))
        self.label_31.setText(_translate("self.MainWindow", "Priority:"))
        self.editSave.setText(_translate("self.MainWindow", "Save"))
        self.editCancel.setText(_translate("self.MainWindow", "Cancel"))
        self.createPriority_2.setPlaceholderText(_translate("self.MainWindow", "Click to Select Priority"))
        self.createPriority_2.setItemText(1, _translate("self.MainWindow", "Low"))
        self.createPriority_2.setItemText(2, _translate("self.MainWindow", "Medium"))
        self.createPriority_2.setItemText(3, _translate("self.MainWindow", "High"))
        self.editTodoName.setPlaceholderText(_translate("self.MainWindow", "Enter To-Do name here..."))
        self.label_28.setText(_translate("self.MainWindow", "To-Do Name:"))
        self.editTodoCancel.setText(_translate("self.MainWindow", "Cancel"))
        self.editTodoSave.setText(_translate("self.MainWindow", "Save"))
        self.addTaskButton.setText(_translate("self.MainWindow", "Add Task"))
        self.taskList.setSortingEnabled(True)
        self.taskList.headerItem().setText(0, _translate("self.MainWindow", "Task Name"))
        self.taskList.headerItem().setText(1, _translate("self.MainWindow", "Description"))
        self.taskList.headerItem().setText(2, _translate("self.MainWindow", "Due Date"))
        self.taskList.headerItem().setText(3, _translate("self.MainWindow", "Priority"))
        self.taskList.headerItem().setText(4, _translate("self.MainWindow", "id"))
        __sortingEnabled = self.taskList.isSortingEnabled()
        self.taskList.setSortingEnabled(False)
        self.taskList.setSortingEnabled(__sortingEnabled)
        self.createDesc.setPlaceholderText(_translate("self.MainWindow", "Type task description here..."))
        self.label_5.setText(_translate("self.MainWindow", "Description: "))
        self.createCancel.setText(_translate("self.MainWindow", "Cancel"))
        self.label_4.setText(_translate("self.MainWindow", "Task Name: "))
        self.createName.setPlaceholderText(_translate("self.MainWindow", "Type task name here..."))
        self.createSave.setText(_translate("self.MainWindow", "Create Task"))
        self.label_3.setText(_translate("self.MainWindow", "Priority:"))
        self.label_6.setText(_translate("self.MainWindow", "*"))
        self.label.setText(_translate("self.MainWindow", "Due Date: "))
        self.createPriority.setPlaceholderText(_translate("self.MainWindow", "Click to Select Priority"))
        self.createPriority.setItemText(1, _translate("self.MainWindow", "Low"))
        self.createPriority.setItemText(2, _translate("self.MainWindow", "Medium"))
        self.createPriority.setItemText(3, _translate("self.MainWindow", "High"))
        self.label_7.setText(_translate("self.MainWindow", "* Required Fields"))
        self.label_32.setText(_translate("self.MainWindow", "Create Task"))
        self.todoListLabel.setText(_translate("self.MainWindow", "To-Do\'s:"))
        self.todoName.setPlaceholderText(_translate("self.MainWindow", "Type To-Do name here..."))
        self.todoLabel.setText(_translate("self.MainWindow", "To-Do Name:"))
        self.todoSave.setText(_translate("self.MainWindow", "Save To-Do"))
        self.todoCancel.setText(_translate("self.MainWindow", "Cancel"))
        self.createTodo.setText(_translate("self.MainWindow", "Create To-Do"))
        self.label_10.setText(_translate("self.MainWindow", "*"))
        self.todoReqLabel.setText(_translate("self.MainWindow", "*"))
        self.label_36.setText(_translate("self.MainWindow", "Task Stopwatch"))
        self.timerStart.setText(_translate("self.MainWindow", "Start"))
        self.timerStop.setText(_translate("self.MainWindow", "Stop"))
        self.timerReset.setText(_translate("self.MainWindow", "Back"))
        self.label_2.setText(_translate("self.MainWindow", "00:00:00.00"))
        self.label_34.setText(_translate("self.MainWindow", "Help"))
        __sortingEnabled = self.listWidget.isSortingEnabled()
        self.listWidget.setSortingEnabled(False)
        item = self.listWidget.item(0)
        item.setText(_translate("self.MainWindow", "- The task list allows you to create a new task by pressing the \'Add Task\' button in the bottom left corner."))
        item = self.listWidget.item(1)
        item.setText(_translate("self.MainWindow", "- Within the \'Create Task\' page, the description and priority fields are both optional, only a Task Name and Due Date is required to create a Task."))
        item = self.listWidget.item(2)
        item.setText(_translate("self.MainWindow", "- Created tasks can be edited by selecting the \'Edit\' button in the inspection window after selecting a task in the task list."))
        item = self.listWidget.item(3)
        item.setText(_translate("self.MainWindow", "- While optional, To-Do\'s can be added to any Task, these can help organize a Task further by subdividing it into smaller parts."))
        item = self.listWidget.item(4)
        item.setText(_translate("self.MainWindow", "- You can create a To-Do by selecting a Task in the Task List and clicking the add To-Do button that appears in the list to the right."))
        item = self.listWidget.item(5)
        item.setText(_translate("self.MainWindow", "- A To-Do name is required to create a To-Do."))
        item = self.listWidget.item(6)
        item.setText(_translate("self.MainWindow", "- To-Do\'s cannot be edited or deleted (without deleting the parent task) after creation."))
        item = self.listWidget.item(7)
        item.setText(_translate("self.MainWindow", "- Tasks and To-Do\'s are saved between sessions, so don\'t worry about closing the program if need be."))
        item = self.listWidget.item(8)
        item.setText(_translate("self.MainWindow", "- Tasks and To-Do\'s can be deleted by selecting the delete button in the inspection window to the right of the task list."))
        self.listWidget.setSortingEnabled(__sortingEnabled)
        self.helpButton.setText(_translate("self.MainWindow", "Help"))
        self.statsButton.setText(_translate("self.MainWindow", "Stats"))
        self.helpBack.setText(_translate("self.MainWindow", "Back"))
        self.taskList.hideColumn(4)
        self.tempItem = None

    def closing_procedure(self):
        self.req_timer('stopTimer', getResponse=False)
        self.socket.close()
        self.context.destroy()

    def open_comm(self, partner):
        self.socket = self.context.socket(zmq.REQ)
        self.socket.connect(self.sockets[partner])

    def req_database(self, message, command=None, getResponse=True, evaluate=True):
        self.socket.close()
        self.open_comm('database')

        self.socket.send_string(str((message, command)))
        response = self.socket.recv_string()

        if getResponse and evaluate:
            return eval(response)
        elif getResponse and not evaluate:
            return response
        
    def req_timer(self, message, command=None, getResponse=True):
        self.socket.close()
        self.open_comm('timer')

        self.socket.send_string(str((message, command)))
        response = self.socket.recv_string()

        if getResponse:
            return response
        
    def req_calendar(self, message, command=None, getResponse=True):
        self.socket.close()
        self.open_comm('calendar')

        self.socket.send_string(str((message, command)))
        response = self.socket.recv_string()

        if getResponse:
            return response
        
    def req_stats(self, message, command=None, getResponse=True):
        self.socket.close()
        self.open_comm('stats')

        self.socket.send_string(str((message, command)))
        response = self.socket.recv_string()

        if getResponse:
            return eval(response)
    
        
    def populate_taskList(self):
        _translate = QtCore.QCoreApplication.translate
        if self.tasks_on_entry:
            self.delete_task()
            for item in self.tasks_on_entry:
                todos = self.req_database("getTodos", str(item[0]))
                newItem = QtWidgets.QTreeWidgetItem(self.taskList)
                newItem.setText(0, _translate("Dialog", item[1]))
                newItem.setText(1, _translate("Dialog", item[2]))
                newItem.setText(2, _translate("Dialog", item[3]))
                newItem.setText(3, _translate("Dialog", item[4]))
                newItem.setText(4, _translate("Dialog", str(item[0])))
                self.taskList.setCurrentItem(newItem)

                for subItem in todos:
                    newTodo = QtWidgets.QTreeWidgetItem()
                    newTodo.setText(0, _translate("Dialog", subItem[1]))
                    newTodo.setText(1, _translate("Dialog", ''))
                    newTodo.setText(2, _translate("Dialog", ''))
                    newTodo.setText(3, _translate("Dialog", ''))
                    newTodo.setText(4, _translate("Dialog", str(subItem[0])))
                    newTodo.setDisabled(True)
                    self.taskList.itemFromIndex(self.taskList.selectedIndexes()[0]).addChild(newTodo)
    
    def check_taskList_size(self, add_temp=True):
        _translate = QtCore.QCoreApplication.translate
        if self.tempItem != None and not add_temp:
            self.tempItem.setDisabled(False)
            self.taskList.setCurrentItem(self.tempItem)
            self.taskList.model().removeRow(self.taskList.selectedIndexes()[0].row())
            self.tempItem = None

        elif add_temp and self.taskList.model().rowCount() <= 0:
            self.tempItem = QtWidgets.QTreeWidgetItem(self.taskList)
            self.tempItem.setText(0, _translate("Dialog", "Click 'Add Task' "))
            self.tempItem.setText(1, _translate("Dialog", "Button to begin"))
            self.tempItem.setText(2, _translate("Dialog", "creating a task"))
            self.tempItem.setText(3, _translate("Dialog", ''))
            self.tempItem.setText(4, _translate("Dialog", ''))
            self.tempItem.setDisabled(True)
            self.inspectTask.setEnabled(False)
            self.inspectTask.setHidden(True)
            self.toCalendarButton.setEnabled(False)
            self.calendarButton.setEnabled(False)

    def validate_entry(self, text_field, button):
        if len(text_field.text()) != 0:
            button.setEnabled(True)
        else:
            button.setEnabled(False)

    def string_to_time(self, text):
        num = eval(text)
        seconds = num + self.currTime
        m, s = divmod(seconds, 60)
        h, m = divmod(m, 60)
        s = round(s, 2)
        m = str(int(round(m, 1)))
        h = str(int(round(h, 1)))
  
        h = '0'+h if len(h) < 2 else h
        m = '0'+m if len(m) < 2 else m
        s = '0'+str(s) if s//10 <= 0 else str(s)
        s = s+'0' if len(s) < 5 else s

        return f'{h}:{m}:{s}'

    def update_time(self, time):
        self.label_2.setText(self.string_to_time(time))

    def init_timer(self):
        message = self.req_timer("getStopwatchTime")
        self.update_time(message)

    def begin_timer(self, check=False):
        self.timerStop.setEnabled(check)
        self.timerStart.setEnabled(not check)
        if check == True:
            self.timer.start(10)
            self.timerStarted = True
        elif check == False and self.timerStarted == True:
            self.timerStarted = False
            self.timer.stop()
            elapsedTime = self.req_timer("stopTimer")
            item = self.currentitem
            self.req_database('updateTask', [item[0], item[1], item[2], item[3], item[4], elapsedTime], False)
                
    def show_popup(self, title, text, funct=None, icon=QMessageBox.Question):
        reply = QMessageBox()
        reply.setText(text)
        reply.setWindowTitle(title)
        reply.setIcon(icon)
        if funct != None:
            reply.setStandardButtons(QMessageBox.Ok|QMessageBox.Cancel)
            reply.buttonClicked.connect(lambda: self.check_popup(reply_button=reply.clickedButton(), funct=funct))
        else:
            reply.setStandardButtons(QMessageBox.Ok)
        reply.exec_()

    def to_help(self, idx):
        self.stackedWidget.setCurrentIndex(3)
        self.helpBack.setVisible(True)
        self.helpBack.setEnabled(True)
        self.helpButton.setVisible(False)
        self.helpButton.setEnabled(False)
        self.helpBack.clicked.connect(lambda: self.return_help(idx))

    def return_help(self, idx):
        self.helpBack.setVisible(False)
        self.helpBack.setEnabled(False)
        self.helpButton.setVisible(True)
        self.helpButton.setEnabled(True)
        self.stackedWidget.setCurrentIndex(idx)

    def to_stats(self):
        data = self.req_database("getMonths")
        self.req_stats('getStats', data, None)

    def check_popup(self, reply_button, funct):
        if reply_button.text() == "OK":
            funct()

    def init_task(self):
        self.createTaskPage.setEnabled(True)
        self.createTaskGroup.setEnabled(True)
        self.stackedWidget.setCurrentIndex(1)

    def create_task(self):
        _translate = QtCore.QCoreApplication.translate
        self.check_taskList_size(False)
        newItem = QtWidgets.QTreeWidgetItem(self.taskList)
        id = self.req_database("createTask", [self.createName.text(), self.createDesc.toPlainText(), self.createDueDate.date().toString("MM-dd-yyyy"), self.createPriority.currentText()])
        newItem.setText(0, _translate("Dialog", self.createName.text()))
        newItem.setText(1, _translate("Dialog", self.createDesc.toPlainText()))
        newItem.setText(2, _translate("Dialog", self.createDueDate.date().toString("MM-dd-yyyy")))
        newItem.setText(3, _translate("Dialog", self.createPriority.currentText()))
        newItem.setText(4, _translate("Dialog", str(id)))   
        self.createTaskPage.setEnabled(False)
        self.stackedWidget.setCurrentIndex(0)
        self.taskList.setCurrentItem(newItem)
        self.insert_todos()
        
    def view_create_todo(self, check=False):
        self.createTodoList.setVisible(check)
        self.createTodoList.setEnabled(check)
        self.todoName.setVisible(check)
        self.todoName.setEnabled(check)
        self.todoLabel.setVisible(check)
        self.todoReqLabel.setVisible(check)
        self.todoListLabel.setVisible(check)
        self.todoCancel.setEnabled(check)
        self.todoCancel.setVisible(check)
        self.todoSave.setVisible(check)

    def add_to_list(self):
        _translate = QtCore.QCoreApplication.translate
        newItem = QtWidgets.QListWidgetItem(self.createTodoList)
        newItem.setText(_translate("Dialog", self.todoName.text()))

    def insert_todos(self):
        _translate = QtCore.QCoreApplication.translate
        for i in range(self.createTodoList.count()):
            curr = self.createTodoList.item(i).text()
            item = self.currentitem
            id = self.req_database("createTodo", [curr, item[4]])

            newTodo = QtWidgets.QTreeWidgetItem()
            newTodo.setText(0, _translate("Dialog", curr))
            newTodo.setText(1, _translate("Dialog", ''))
            newTodo.setText(2, _translate("Dialog", ''))
            newTodo.setText(3, _translate("Dialog", ''))
            newTodo.setText(4, _translate("Dialog", id))

            newTodo.setDisabled(True)
            self.taskList.itemFromIndex(self.taskList.selectedIndexes()[0]).addChild(newTodo)
            self.view_create_todo(False)
    
    def exit_creation(self):
        self.createName.setText('')
        self.createDesc.setPlainText('')
        self.createDueDate.setDate(self.default_date)
        self.createPriority.setCurrentIndex(0)
        self.stackedWidget.setCurrentIndex(0)

    def delete_task(self):
        if len(self.taskList.selectedIndexes()) != 0:
            item = self.currentitem
            curr = self.taskList.selectedIndexes()[0]
            self.req_database("deleteTask", [item[4]], False, False)
            self.taskList.model().removeRow(curr.row())
            self.check_taskList_size(True)
                

    def edit(self, check=False):
        self.editTaskName.setReadOnly(not check)
        self.editTaskDesc.setReadOnly(not check)
        self.deleteTask.setEnabled(not check)
        self.finishTask.setEnabled(not check)
        self.addTodo.setEnabled(not check)
        self.beginTask.setEnabled(not check)
        self.editDueDate.setEnabled(check)
        self.createPriority_2.setEnabled(check)
        self.editSave.setEnabled(check)
        self.editSave.setVisible(check)
        self.editCancel.setEnabled(check)
        self.editCancel.setVisible(check)

    def edit_add_todo(self, check=False):
        if not check:
            self.editTodoName.setText('')
        self.label_28.setVisible(check)
        self.editTodoName.setReadOnly(not check)
        self.editTodoName.setVisible(check)
        self.editTodoCancel.setEnabled(check)
        self.editTodoCancel.setVisible(check)
        self.editTodoSave.setVisible(check)
        
    def update_task(self):
        _translate = QtCore.QCoreApplication.translate
        if self.taskList.selectedIndexes() != None:
            item = self.currentitem
            self.req_database("updateTask", [self.editTaskName.text(), self.editTaskDesc.toPlainText(), self.editDueDate.date().toString("MM-dd-yyyy"), self.createPriority_2.currentText(), item[4], '0.0'], False)
            idx = self.taskList.selectedIndexes()[0].row()
            self.taskList.topLevelItem(idx).setText(0, _translate("Dialog", self.editTaskName.text()))
            self.taskList.topLevelItem(idx).setText(1, _translate("Dialog", self.editTaskDesc.toPlainText()))
            self.taskList.topLevelItem(idx).setText(2, _translate("Dialog", self.editDueDate.date().toString("MM-dd-yyyy")))
            self.taskList.topLevelItem(idx).setText(3, _translate("Dialog", self.createPriority_2.currentText()))
            self.edit(False)

    def save_todo(self):
        _translate = QtCore.QCoreApplication.translate
        if self.taskList.selectedIndexes() != None:
            item = self.get_item_values()
            id = self.req_database("createTodo", [self.editTodoName.text(), item[4]])
            newTodo = QtWidgets.QTreeWidgetItem()
            newTodo.setText(0, _translate("Dialog", self.editTodoName.text()))
            newTodo.setText(1, _translate("Dialog", ''))
            newTodo.setText(2, _translate("Dialog", ''))
            newTodo.setText(3, _translate("Dialog", ''))
            newTodo.setText(4, _translate("Dialog", str(id)))
            newTodo.setDisabled(True)
            self.taskList.itemFromIndex(self.taskList.selectedIndexes()[0]).addChild(newTodo)
            self.edit_add_todo(False)
            
    def edit_cancel(self):
        self.edit(False)
        self.read_item_values()

    def to_timer(self):
        self.label_2.setText(self.string_to_time('0'))
        self.timerGroup.setEnabled(True)
        self.timerPage.setEnabled(True)
        self.stackedWidget.setCurrentIndex(2)

    def exit_timer(self):
        self.timerGroup.setEnabled(False)
        self.timerPage.setEnabled(False)
        self.timer.stop()
        self.req_timer("stopTimer", getResponse=False)
        self.stackedWidget.setCurrentIndex(0)

    def clear_selection(self):
        self.editTaskName.setText('')
        self.editTaskDesc.setText('')
        self.editDueDate.setDate(self.default_date)
        self.createPriority_2.setCurrentIndex(0)

    def handle_clicked(self):
        if self.tempItem == None:
            self.toCalendarButton.setEnabled(True)
            self.calendarButton.setEnabled(True)
            self.inspectTask.setEnabled(True)
            self.inspectTask.setHidden(False)
            self.edit(False)
            self.clear_selection()
            self.currentitem = self.get_item_values()
            if len(self.currentitem) >= 4:
                self.currTime = self.req_database('getTime', [self.currentitem[4]])
            self.read_item_values()

    def send_to_calendar(self):
        item = self.currentitem
        response = self.req_calendar("addEvent", item)
        self.show_popup("Calendar Updated", response, icon=QMessageBox.Information)

    def open_calendar(self):
        self.req_calendar("viewCalendar", getResponse=False)

    def complete_task(self):
        time = self.req_database('getTime', [self.currentitem[4]])
        overdue = 0
        date = QtCore.QDate.fromString(self.currentitem[2], "MM-dd-yyyy")
        if date < self.default_date:
            overdue = 1
        month = self.default_date.toString('MM-dd-yyyy')
        self.req_database("updateMonth", [month[:2], time, overdue], False)
        self.delete_task()

    def get_item_values(self):
        item = []
        self.taskList.showColumn(4)
        for index in self.taskList.selectedIndexes():
            curr = self.taskList.model().itemData(index)
            if len(curr) != 0:
                item.append(curr[0])
            else:
                item.append('')
        self.taskList.hideColumn(4)
        return item

    def read_item_values(self):
        item = self.currentitem
        if len(item) >= 4:
            self.currTime = self.req_database('getTime', [item[4]])
        try:
            self.editTaskName.setText(item[0])
        except:
            print("task name error")
        try:
            self.editTaskDesc.setText(item[1])
        except:
            print("description not set")
        try:
            if len(item[2][4:]) == 10:
                self.editDueDate.setDate(QtCore.QDate.fromString(item[2], "MM-dd-yyyy"))
            else:
                self.editDueDate.setDate(QtCore.QDate.fromString(item[2], "MM-dd-yyyy"))
        except:
            self.editDueDate.setDate(self.default_date)
        try:
            if item[3] == '':
                idx = 0
            elif item[3] == 'Low':
                idx = 1
            elif item[3] == 'Medium':
                idx = 2
            elif item[3] == 'High':
                idx = 3
            self.createPriority_2.setCurrentIndex(idx)
        except:
            print("priority not set")
        